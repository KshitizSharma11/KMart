{"ast":null,"code":"import URL from'url-parse';export function getFilename(url){var _URL=new URL(url,{}),pathname=_URL.pathname;return pathname.substring(pathname.lastIndexOf('/')+1);}export function getFileExtension(url){var filename=getFilename(url);var dotIndex=filename.lastIndexOf('.');return dotIndex>0?filename.substring(dotIndex):'';}export function getManifestBaseUrl(manifestUrl){var urlObject=new URL(manifestUrl,{});if(urlObject.protocol==='exp:'){urlObject.set('protocol','http:');}else if(urlObject.protocol==='exps:'){urlObject.set('protocol','https:');}var directory=urlObject.pathname.substring(0,urlObject.pathname.lastIndexOf('/')+1);urlObject.set('pathname',directory);urlObject.set('query','');urlObject.set('hash','');return urlObject.href;}","map":{"version":3,"names":["URL","getFilename","url","_URL","pathname","substring","lastIndexOf","getFileExtension","filename","dotIndex","getManifestBaseUrl","manifestUrl","urlObject","protocol","set","directory","href"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\react\\ecommerce\\Ecom\\node_modules\\expo-asset\\src\\AssetUris.ts"],"sourcesContent":["import URL from 'url-parse';\n\nexport function getFilename(url: string): string {\n  const { pathname } = new URL(url, {});\n  return pathname.substring(pathname.lastIndexOf('/') + 1);\n}\n\nexport function getFileExtension(url: string): string {\n  const filename = getFilename(url);\n  const dotIndex = filename.lastIndexOf('.');\n  // Ignore leading dots for hidden files\n  return dotIndex > 0 ? filename.substring(dotIndex) : '';\n}\n\n/**\n * Returns the base URL from a manifest's URL. For example, given a manifest hosted at\n * https://example.com/app/manifest.json, the base URL would be https://example.com/app/. Query\n * parameters and fragments also are removed.\n *\n * For an Expo-hosted project with a manifest hosted at https://exp.host/@user/project/index.exp, the\n * base URL would be https://exp.host/@user/project.\n *\n * We also normalize the \"exp\" protocol to \"http\" to handle internal URLs with the Expo schemes used\n * to tell the OS to open the URLs in the the Expo client.\n */\nexport function getManifestBaseUrl(manifestUrl: string): string {\n  const urlObject = new URL(manifestUrl, {});\n\n  // Change the scheme to http(s) if it is exp(s)\n  if (urlObject.protocol === 'exp:') {\n    urlObject.set('protocol', 'http:');\n  } else if (urlObject.protocol === 'exps:') {\n    urlObject.set('protocol', 'https:');\n  }\n\n  // Trim filename, query parameters, and fragment, if any\n  const directory = urlObject.pathname.substring(0, urlObject.pathname.lastIndexOf('/') + 1);\n  urlObject.set('pathname', directory);\n  urlObject.set('query', '');\n  urlObject.set('hash', '');\n\n  return urlObject.href;\n}\n"],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,WAAW,CAE3B,MAAM,SAAU,CAAAC,WAAWA,CAACC,GAAW,EACrC,IAAAC,IAAA,CAAqB,GAAI,CAAAH,GAAG,CAACE,GAAG,CAAE,EAAE,CAAC,CAA7BE,QAAQ,CAAAD,IAAA,CAARC,QAAQ,CAChB,MAAO,CAAAA,QAAQ,CAACC,SAAS,CAACD,QAAQ,CAACE,WAAW,CAAC,GAAG,CAAC,CAAG,CAAC,CAAC,CAC1D,CAEA,MAAM,SAAU,CAAAC,gBAAgBA,CAACL,GAAW,EAC1C,GAAM,CAAAM,QAAQ,CAAGP,WAAW,CAACC,GAAG,CAAC,CACjC,GAAM,CAAAO,QAAQ,CAAGD,QAAQ,CAACF,WAAW,CAAC,GAAG,CAAC,CAE1C,MAAO,CAAAG,QAAQ,CAAG,CAAC,CAAGD,QAAQ,CAACH,SAAS,CAACI,QAAQ,CAAC,CAAG,EAAE,CACzD,CAaA,MAAM,SAAU,CAAAC,kBAAkBA,CAACC,WAAmB,EACpD,GAAM,CAAAC,SAAS,CAAG,GAAI,CAAAZ,GAAG,CAACW,WAAW,CAAE,EAAE,CAAC,CAG1C,GAAIC,SAAS,CAACC,QAAQ,GAAK,MAAM,CAAE,CACjCD,SAAS,CAACE,GAAG,CAAC,UAAU,CAAE,OAAO,CAAC,C,CACnC,IAAM,IAAIF,SAAS,CAACC,QAAQ,GAAK,OAAO,CAAE,CACzCD,SAAS,CAACE,GAAG,CAAC,UAAU,CAAE,QAAQ,CAAC,C,CAIrC,GAAM,CAAAC,SAAS,CAAGH,SAAS,CAACR,QAAQ,CAACC,SAAS,CAAC,CAAC,CAAEO,SAAS,CAACR,QAAQ,CAACE,WAAW,CAAC,GAAG,CAAC,CAAG,CAAC,CAAC,CAC1FM,SAAS,CAACE,GAAG,CAAC,UAAU,CAAEC,SAAS,CAAC,CACpCH,SAAS,CAACE,GAAG,CAAC,OAAO,CAAE,EAAE,CAAC,CAC1BF,SAAS,CAACE,GAAG,CAAC,MAAM,CAAE,EAAE,CAAC,CAEzB,MAAO,CAAAF,SAAS,CAACI,IAAI,CACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}