{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import Dimensions from\"../Dimensions\";var PixelRatio=function(){function PixelRatio(){_classCallCheck(this,PixelRatio);}_createClass(PixelRatio,null,[{key:\"get\",value:function get(){return Dimensions.get('window').scale;}},{key:\"getFontScale\",value:function getFontScale(){return Dimensions.get('window').fontScale||PixelRatio.get();}},{key:\"getPixelSizeForLayoutSize\",value:function getPixelSizeForLayoutSize(layoutSize){return Math.round(layoutSize*PixelRatio.get());}},{key:\"roundToNearestPixel\",value:function roundToNearestPixel(layoutSize){var ratio=PixelRatio.get();return Math.round(layoutSize*ratio)/ratio;}}]);return PixelRatio;}();export{PixelRatio as default};","map":{"version":3,"names":["Dimensions","PixelRatio","_classCallCheck","_createClass","key","value","get","scale","getFontScale","fontScale","getPixelSizeForLayoutSize","layoutSize","Math","round","roundToNearestPixel","ratio","default"],"sources":["C:/Users/hp/OneDrive/Desktop/react/ecommerce/Ecom/node_modules/react-native-web/dist/exports/PixelRatio/index.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport Dimensions from '../Dimensions';\n\n/**\n * PixelRatio gives access to the device pixel density.\n */\nexport default class PixelRatio {\n  /**\n   * Returns the device pixel density.\n   */\n  static get() {\n    return Dimensions.get('window').scale;\n  }\n\n  /**\n   * No equivalent for Web\n   */\n  static getFontScale() {\n    return Dimensions.get('window').fontScale || PixelRatio.get();\n  }\n\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   * Guaranteed to return an integer number.\n   */\n  static getPixelSizeForLayoutSize(layoutSize) {\n    return Math.round(layoutSize * PixelRatio.get());\n  }\n\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n  static roundToNearestPixel(layoutSize) {\n    var ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  }\n}"],"mappings":"gIAUA,MAAO,CAAAA,UAAU,qBAAsB,GAKlB,CAAAC,UAAU,qBAAAA,WAAA,EAAAC,eAAA,MAAAD,UAAA,GAAAE,YAAA,CAAAF,UAAA,QAAAG,GAAA,OAAAC,KAAA,CAI7B,SAAAC,IAAA,CAAa,CACX,MAAO,CAAAN,UAAU,CAACM,GAAG,CAAC,QAAQ,CAAC,CAACC,KAAK,CACvC,CAAC,GAAAH,GAAA,gBAAAC,KAAA,CAKD,SAAAG,aAAA,CAAsB,CACpB,MAAO,CAAAR,UAAU,CAACM,GAAG,CAAC,QAAQ,CAAC,CAACG,SAAS,EAAIR,UAAU,CAACK,GAAG,CAAC,CAAC,CAC/D,CAAC,GAAAF,GAAA,6BAAAC,KAAA,CAMD,SAAAK,0BAAiCC,UAAU,CAAE,CAC3C,MAAO,CAAAC,IAAI,CAACC,KAAK,CAACF,UAAU,CAAGV,UAAU,CAACK,GAAG,CAAC,CAAC,CAAC,CAClD,CAAC,GAAAF,GAAA,uBAAAC,KAAA,CAQD,SAAAS,oBAA2BH,UAAU,CAAE,CACrC,GAAI,CAAAI,KAAK,CAAGd,UAAU,CAACK,GAAG,CAAC,CAAC,CAC5B,MAAO,CAAAM,IAAI,CAACC,KAAK,CAACF,UAAU,CAAGI,KAAK,CAAC,CAAGA,KAAK,CAC/C,CAAC,WAAAd,UAAA,YAhCkBA,UAAU,IAAAe,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}