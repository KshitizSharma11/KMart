{"ast":null,"code":"import NativeModulesProxy from\"./NativeModulesProxy\";export function requireNativeModule(moduleName){var _ref,_globalThis$expo$modu,_globalThis$expo,_globalThis$expo$modu2,_globalThis$ExpoModul;var nativeModule=(_ref=(_globalThis$expo$modu=(_globalThis$expo=globalThis.expo)==null?void 0:(_globalThis$expo$modu2=_globalThis$expo.modules)==null?void 0:_globalThis$expo$modu2[moduleName])!=null?_globalThis$expo$modu:(_globalThis$ExpoModul=globalThis.ExpoModules)==null?void 0:_globalThis$ExpoModul[moduleName])!=null?_ref:NativeModulesProxy[moduleName];if(!nativeModule){throw new Error(`Cannot find native module '${moduleName}'`);}return nativeModule;}","map":{"version":3,"names":["NativeModulesProxy","requireNativeModule","moduleName","_ref","_globalThis$expo$modu","_globalThis$expo","_globalThis$expo$modu2","_globalThis$ExpoModul","nativeModule","globalThis","expo","modules","ExpoModules","Error"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\react\\ecommerce\\Ecom\\node_modules\\expo-modules-core\\src\\requireNativeModule.ts"],"sourcesContent":["import NativeModulesProxy from './NativeModulesProxy';\n\ntype ExpoObject = {\n  modules:\n    | undefined\n    | {\n        [key: string]: any;\n      };\n};\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var expo: ExpoObject | undefined;\n\n  /**\n   * @deprecated `global.ExpoModules` is deprecated, use `global.expo.modules` instead.\n   */\n  // eslint-disable-next-line no-var\n  var ExpoModules:\n    | undefined\n    | {\n        [key: string]: any;\n      };\n}\n\n/**\n * Imports the native module registered with given name. In the first place it tries to load\n * the module installed through the JSI host object and then falls back to the bridge proxy module.\n * Notice that the modules loaded from the proxy may not support some features like synchronous functions.\n *\n * @param moduleName Name of the requested native module.\n * @returns Object representing the native module.\n * @throws Error when there is no native module with given name.\n */\nexport function requireNativeModule<ModuleType = any>(moduleName: string): ModuleType {\n  const nativeModule: ModuleType =\n    globalThis.expo?.modules?.[moduleName] ??\n    globalThis.ExpoModules?.[moduleName] ??\n    NativeModulesProxy[moduleName];\n\n  if (!nativeModule) {\n    throw new Error(`Cannot find native module '${moduleName}'`);\n  }\n  return nativeModule;\n}\n"],"mappings":"AAAA,MAAO,CAAAA,kBAAkB,4BAkCzB,MAAM,SAAU,CAAAC,mBAAmBA,CAAmBC,UAAkB,MAAAC,IAAA,CAAAC,qBAAA,CAAAC,gBAAA,CAAAC,sBAAA,CAAAC,qBAAA,CACtE,GAAM,CAAAC,YAAY,EAAAL,IAAA,EAAAC,qBAAA,EAAAC,gBAAA,CAChBI,UAAU,CAACC,IAAI,gBAAAJ,sBAAA,CAAfD,gBAAA,CAAiBM,OAAO,eAAxBL,sBAAA,CAA2BJ,UAAU,CAAC,QAAAE,qBAAA,EAAAG,qBAAA,CACtCE,UAAU,CAACG,WAAW,eAAtBL,qBAAA,CAAyBL,UAAU,CAAC,QAAAC,IAAA,CACpCH,kBAAkB,CAACE,UAAU,CAAC,CAEhC,GAAI,CAACM,YAAY,CAAE,CACjB,KAAM,IAAI,CAAAK,KAAK,CAAC,8BAA8BX,UAAU,GAAG,CAAC,C,CAE9D,MAAO,CAAAM,YAAY,CACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}