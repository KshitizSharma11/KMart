{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{CodedError,UnavailabilityError}from'expo-modules-core';import ExpoFontLoader from\"./ExpoFontLoader\";import{FontDisplay}from\"./Font.types\";import{getAssetForSource,loadSingleFontAsync,fontFamilyNeedsScoping,getNativeFontName}from\"./FontLoader\";var loaded={};var loadPromises={};export function processFontFamily(fontFamily){if(!fontFamily||!fontFamilyNeedsScoping(fontFamily)){return fontFamily;}if(!isLoaded(fontFamily)){if(__DEV__){if(isLoading(fontFamily)){console.error(`You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`);}else{console.error(`fontFamily \"${fontFamily}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`);}}return'System';}return`ExpoFont-${getNativeFontName(fontFamily)}`;}export function isLoaded(fontFamily){return fontFamily in loaded;}export function isLoading(fontFamily){return fontFamily in loadPromises;}export function loadAsync(_x,_x2){return _loadAsync.apply(this,arguments);}function _loadAsync(){_loadAsync=_asyncToGenerator(function*(fontFamilyOrFontMap,source){if(typeof fontFamilyOrFontMap==='object'){if(source){throw new CodedError(`ERR_FONT_API`,`No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);}var fontMap=fontFamilyOrFontMap;var names=Object.keys(fontMap);yield Promise.all(names.map(function(name){return loadFontInNamespaceAsync(name,fontMap[name]);}));return;}return yield loadFontInNamespaceAsync(fontFamilyOrFontMap,source);});return _loadAsync.apply(this,arguments);}function loadFontInNamespaceAsync(_x3,_x4){return _loadFontInNamespaceAsync.apply(this,arguments);}function _loadFontInNamespaceAsync(){_loadFontInNamespaceAsync=_asyncToGenerator(function*(fontFamily,source){if(!source){throw new CodedError(`ERR_FONT_SOURCE`,`Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);}if(loaded[fontFamily]){return;}if(loadPromises.hasOwnProperty(fontFamily)){return loadPromises[fontFamily];}var asset=getAssetForSource(source);loadPromises[fontFamily]=_asyncToGenerator(function*(){try{yield loadSingleFontAsync(fontFamily,asset);loaded[fontFamily]=true;}finally{delete loadPromises[fontFamily];}})();yield loadPromises[fontFamily];});return _loadFontInNamespaceAsync.apply(this,arguments);}export function unloadAllAsync(){return _unloadAllAsync.apply(this,arguments);}function _unloadAllAsync(){_unloadAllAsync=_asyncToGenerator(function*(){if(!ExpoFontLoader.unloadAllAsync){throw new UnavailabilityError('expo-font','unloadAllAsync');}if(Object.keys(loadPromises).length){throw new CodedError(`ERR_UNLOAD`,`Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`);}for(var fontFamily of Object.keys(loaded)){delete loaded[fontFamily];}yield ExpoFontLoader.unloadAllAsync();});return _unloadAllAsync.apply(this,arguments);}export function unloadAsync(_x5,_x6){return _unloadAsync.apply(this,arguments);}function _unloadAsync(){_unloadAsync=_asyncToGenerator(function*(fontFamilyOrFontMap,options){if(!ExpoFontLoader.unloadAsync){throw new UnavailabilityError('expo-font','unloadAsync');}if(typeof fontFamilyOrFontMap==='object'){if(options){throw new CodedError(`ERR_FONT_API`,`No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);}var fontMap=fontFamilyOrFontMap;var names=Object.keys(fontMap);yield Promise.all(names.map(function(name){return unloadFontInNamespaceAsync(name,fontMap[name]);}));return;}return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap,options);});return _unloadAsync.apply(this,arguments);}function unloadFontInNamespaceAsync(_x7,_x8){return _unloadFontInNamespaceAsync.apply(this,arguments);}function _unloadFontInNamespaceAsync(){_unloadFontInNamespaceAsync=_asyncToGenerator(function*(fontFamily,options){if(!loaded[fontFamily]){return;}else{delete loaded[fontFamily];}var nativeFontName=getNativeFontName(fontFamily);if(!nativeFontName){throw new CodedError(`ERR_FONT_FAMILY`,`Cannot unload an empty name`);}yield ExpoFontLoader.unloadAsync(nativeFontName,options);});return _unloadFontInNamespaceAsync.apply(this,arguments);}export{FontDisplay};","map":{"version":3,"names":["CodedError","UnavailabilityError","ExpoFontLoader","FontDisplay","getAssetForSource","loadSingleFontAsync","fontFamilyNeedsScoping","getNativeFontName","loaded","loadPromises","processFontFamily","fontFamily","isLoaded","__DEV__","isLoading","console","error","loadAsync","_x","_x2","_loadAsync","apply","arguments","_asyncToGenerator","fontFamilyOrFontMap","source","fontMap","names","Object","keys","Promise","all","map","name","loadFontInNamespaceAsync","_x3","_x4","_loadFontInNamespaceAsync","hasOwnProperty","asset","unloadAllAsync","_unloadAllAsync","length","join","unloadAsync","_x5","_x6","_unloadAsync","options","unloadFontInNamespaceAsync","_x7","_x8","_unloadFontInNamespaceAsync","nativeFontName"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\react\\ecommerce\\Ecom\\node_modules\\expo-font\\src\\Font.ts"],"sourcesContent":["import { CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\n\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\n// @needsAudit\n// note(brentvatne): at some point we may want to warn if this is called outside of a managed app.\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n *\n * @param fontFamily Name of font to process.\n * @returns Returns a name processed for use with the [current workflow](https://docs.expo.dev/archive/managed-vs-bare/).\n */\nexport function processFontFamily(fontFamily: string | null): string | null {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(\n          `You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${fontFamily}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @return Returns `true` if the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  return fontFamily in loaded;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @returns Returns `true` if the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n// @needsAudit\n/**\n * Highly efficient method for loading fonts from static or remote resources which can then be used\n * with the platform's native text elements. In the browser this generates a `@font-face` block in\n * a shared style sheet for fonts. No CSS is needed to use this method.\n *\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style)\n * style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n *\n * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n */\nexport async function loadAsync(\n  fontFamilyOrFontMap: string | Record<string, FontSource>,\n  source?: FontSource\n): Promise<void> {\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => loadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  if (loaded[fontFamily]) {\n    return;\n  }\n\n  if (loadPromises.hasOwnProperty(fontFamily)) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n// @needsAudit\n/**\n * Unloads all the custom fonts. This is used for testing.\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n// @needsAudit\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n * the custom font originally.\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | Record<string, UnloadFontOptions>,\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions | null\n): Promise<void> {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const nativeFontName = getNativeFontName(fontFamily);\n\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}