{"ast":null,"code":"import UIManager from\"../../exports/UIManager\";var TextInputState={_currentlyFocusedNode:null,currentlyFocusedField:function currentlyFocusedField(){if(document.activeElement!==this._currentlyFocusedNode){this._currentlyFocusedNode=null;}return this._currentlyFocusedNode;},focusTextInput:function focusTextInput(textFieldNode){if(textFieldNode!==null){this._currentlyFocusedNode=textFieldNode;if(document.activeElement!==textFieldNode){UIManager.focus(textFieldNode);}}},blurTextInput:function blurTextInput(textFieldNode){if(textFieldNode!==null){this._currentlyFocusedNode=null;if(document.activeElement===textFieldNode){UIManager.blur(textFieldNode);}}}};export default TextInputState;","map":{"version":3,"names":["UIManager","TextInputState","_currentlyFocusedNode","currentlyFocusedField","document","activeElement","focusTextInput","textFieldNode","focus","blurTextInput","blur"],"sources":["C:/Users/hp/OneDrive/Desktop/react/ecommerce/Ecom/node_modules/react-native-web/dist/modules/TextInputState/index.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport UIManager from '../../exports/UIManager';\n\n/**\n * This class is responsible for coordinating the \"focused\"\n * state for TextInputs. All calls relating to the keyboard\n * should be funneled through here\n */\nvar TextInputState = {\n  /**\n   * Internal state\n   */\n  _currentlyFocusedNode: null,\n  /**\n   * Returns the ID of the currently focused text field, if one exists\n   * If no text field is focused it returns null\n   */\n  currentlyFocusedField() {\n    if (document.activeElement !== this._currentlyFocusedNode) {\n      this._currentlyFocusedNode = null;\n    }\n    return this._currentlyFocusedNode;\n  },\n  /**\n   * @param {Object} TextInputID id of the text field to focus\n   * Focuses the specified text field\n   * noop if the text field was already focused\n   */\n  focusTextInput(textFieldNode) {\n    if (textFieldNode !== null) {\n      this._currentlyFocusedNode = textFieldNode;\n      if (document.activeElement !== textFieldNode) {\n        UIManager.focus(textFieldNode);\n      }\n    }\n  },\n  /**\n   * @param {Object} textFieldNode id of the text field to focus\n   * Unfocuses the specified text field\n   * noop if it wasn't focused\n   */\n  blurTextInput(textFieldNode) {\n    if (textFieldNode !== null) {\n      this._currentlyFocusedNode = null;\n      if (document.activeElement === textFieldNode) {\n        UIManager.blur(textFieldNode);\n      }\n    }\n  }\n};\nexport default TextInputState;"],"mappings":"AAUA,MAAO,CAAAA,SAAS,+BAOhB,GAAI,CAAAC,cAAc,CAAG,CAInBC,qBAAqB,CAAE,IAAI,CAK3BC,qBAAqB,UAAAA,sBAAA,CAAG,CACtB,GAAIC,QAAQ,CAACC,aAAa,GAAK,IAAI,CAACH,qBAAqB,CAAE,CACzD,IAAI,CAACA,qBAAqB,CAAG,IAAI,CACnC,CACA,MAAO,KAAI,CAACA,qBAAqB,CACnC,CAAC,CAMDI,cAAc,UAAAA,eAACC,aAAa,CAAE,CAC5B,GAAIA,aAAa,GAAK,IAAI,CAAE,CAC1B,IAAI,CAACL,qBAAqB,CAAGK,aAAa,CAC1C,GAAIH,QAAQ,CAACC,aAAa,GAAKE,aAAa,CAAE,CAC5CP,SAAS,CAACQ,KAAK,CAACD,aAAa,CAAC,CAChC,CACF,CACF,CAAC,CAMDE,aAAa,UAAAA,cAACF,aAAa,CAAE,CAC3B,GAAIA,aAAa,GAAK,IAAI,CAAE,CAC1B,IAAI,CAACL,qBAAqB,CAAG,IAAI,CACjC,GAAIE,QAAQ,CAACC,aAAa,GAAKE,aAAa,CAAE,CAC5CP,SAAS,CAACU,IAAI,CAACH,aAAa,CAAC,CAC/B,CACF,CACF,CACF,CAAC,CACD,cAAe,CAAAN,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}